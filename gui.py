import tkinter as tk
from tkinter import filedialog, ttk
from PIL import Image, ImageTk
import cv2
import numpy as np
import threading

class SimpleSegmentationApp:
    def __init__(self, root, segmentator):
        self.root = root
        self.segmentator = segmentator
        self.current_image = None
        self.current_background = "blue"
        self.custom_background = None
        self.effects = {}
        
        self.setup_ui()
    
    def setup_ui(self):
        self.root.title("AI Human Segmentation - PRO")
        self.root.geometry("1200x700")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        control_frame = ttk.LabelFrame(main_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", width=300)
        control_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0,10))
        control_frame.pack_propagate(False)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_frame = ttk.Frame(main_frame)
        image_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_panel(control_frame)
        self.create_image_panel(image_frame)
    
    def create_control_panel(self, parent):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ttk.Button(parent, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                  command=self.load_image).pack(fill=tk.X, pady=5)
        
        ttk.Button(parent, text="üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É",
                  command=self.open_camera).pack(fill=tk.X, pady=5)
        
        # –í—ã–±–æ—Ä —Ñ–æ–Ω–∞
        bg_frame = ttk.LabelFrame(parent, text="–§–æ–Ω")
        bg_frame.pack(fill=tk.X, pady=10)
        
        backgrounds = [
            ("üîµ –°–∏–Ω–∏–π", "blue"),
            ("üü¢ –ó–µ–ª–µ–Ω—ã–π", "green"), 
            ("üåà –ì—Ä–∞–¥–∏–µ–Ω—Ç", "gradient"),
            ("‚ö´ –ß–µ—Ä–Ω—ã–π", "black"),
            ("üåÄ –†–∞–∑–º—ã—Ç–∏–µ", "blur")
        ]
        
        for text, bg_type in backgrounds:
            ttk.Button(bg_frame, text=text,
                      command=lambda bt=bg_type: self.set_background(bt)).pack(fill=tk.X, pady=2)
        
        # –ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–Ω–∞
        editor_frame = ttk.LabelFrame(parent, text="üé® –†–µ–¥–∞–∫—Ç–æ—Ä —Ñ–æ–Ω–∞")
        editor_frame.pack(fill=tk.X, pady=10)
        
        # –°–ª–∞–π–¥–µ—Ä—ã
        self.create_slider(editor_frame, "–Ø—Ä–∫–æ—Å—Ç—å:", "brightness", 0.5, 1.5, 1.0)
        self.create_slider(editor_frame, "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:", "contrast", 0.5, 2.0, 1.0)
        self.create_slider(editor_frame, "–û—Ç—Ç–µ–Ω–æ–∫:", "hue", -30, 30, 0)
        self.create_slider(editor_frame, "–†–∞–∑–º—ã—Ç–∏–µ:", "blur", 0, 5, 0)
        
        # –ü—Ä–µ—Å–µ—Ç—ã
        preset_frame = ttk.Frame(editor_frame)
        preset_frame.pack(fill=tk.X, pady=5)
        
        presets = [
            ("üîµ DION Blue", "dion_blue"),
            ("‚ö´ DION Dark", "dion_dark"),
            ("üè¢ DION Modern", "dion_modern")
        ]
        
        for text, preset in presets:
            ttk.Button(preset_frame, text=text,
                      command=lambda p=preset: self.apply_preset(p)).pack(side=tk.LEFT, padx=2)
    
    def create_slider(self, parent, label, effect, min_val, max_val, default):
        frame = ttk.Frame(parent)
        frame.pack(fill=tk.X, pady=2)
        
        ttk.Label(frame, text=label).pack(anchor=tk.W)
        
        var = tk.DoubleVar(value=default)
        scale = ttk.Scale(frame, variable=var, from_=min_val, to=max_val,
                         command=lambda v, e=effect: self.on_slider_change(e, float(v)))
        scale.pack(fill=tk.X)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        setattr(self, f"{effect}_var", var)
    
    def create_image_panel(self, parent):
        # –û—Ä–∏–≥–∏–Ω–∞–ª
        orig_frame = ttk.LabelFrame(parent, text="–û—Ä–∏–≥–∏–Ω–∞–ª")
        orig_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0,5))
        
        self.orig_canvas = tk.Canvas(orig_frame, bg='#333')
        self.orig_canvas.pack(fill=tk.BOTH, expand=True)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_frame = ttk.LabelFrame(parent, text="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        result_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5,0))
        
        self.result_canvas = tk.Canvas(result_frame, bg='#333')
        self.result_canvas.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–ª—É—à–∫–∏
        self.show_placeholder(self.orig_canvas, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        self.show_placeholder(self.result_canvas, "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å")
    
    def load_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Images", "*.jpg *.jpeg *.png *.bmp")])
        if file_path:
            self.current_image = file_path
            image = Image.open(file_path)
            self.display_image(image, self.orig_canvas)
            self.process_current_image()
    
    def open_camera(self):
        print("üì∑ –†–µ–∂–∏–º –∫–∞–º–µ—Ä—ã (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)")
    
    def set_background(self, bg_type):
        self.current_background = bg_type
        self.process_current_image()
    
    def on_slider_change(self, effect, value):
        self.effects[effect] = value
        self.process_current_image()
    
    def apply_preset(self, preset_name):
        self.effects['preset'] = preset_name
        self.process_current_image()
    
    def process_current_image(self):
        if not self.current_image:
            return
            
        def process():
            try:
                mask, result = self.segmentator.process_image(
                    self.current_image, 
                    self.current_background,
                    effects=self.effects
                )
                
                result_bgr = cv2.cvtColor(result, cv2.COLOR_RGB2BGR)
                result_pil = Image.fromarray(result_bgr)
                self.display_image(result_pil, self.result_canvas)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        
        threading.Thread(target=process, daemon=True).start()
    
    def display_image(self, image, canvas):
        canvas.delete("all")
        canvas_width = canvas.winfo_width()
        canvas_height = canvas.winfo_height()
        
        if canvas_width <= 1:
            self.root.after(100, lambda: self.display_image(image, canvas))
            return
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_width, img_height = image.size
        ratio = min(canvas_width/img_width, canvas_height/img_height)
        new_size = (int(img_width*ratio), int(img_height*ratio))
        
        resized = image.resize(new_size, Image.Resampling.LANCZOS)
        photo = ImageTk.PhotoImage(resized)
        
        x = (canvas_width - new_size[0]) // 2
        y = (canvas_height - new_size[1]) // 2
        
        canvas.create_image(x, y, anchor=tk.NW, image=photo)
        canvas.image = photo
    
    def show_placeholder(self, canvas, text):
        canvas.delete("all")
        canvas.create_text(canvas.winfo_width()//2, canvas.winfo_height()//2,
                          text=text, fill="white", font=("Arial", 12))